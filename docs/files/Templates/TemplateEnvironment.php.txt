<?php
    /**
     * Created by PhpStorm.
     * User: bgolek
     * Date: 2015-10-12
     * Time: 14:03
     */

    namespace Conpago\Cli\Templates;

use Conpago\Cli\Templates\Contract\ITemplateLoader;
    use Conpago\Cli\Templates\Contract\ITemplateOptions;

    /**
     * Class TemplateEnvironment
     *
     * @license MIT
     * @author Bartosz GoÅ‚ek <bartosz.golek@gmail.com>
     */
    class TemplateEnvironment
    {
        /**
         * @var ITemplateLoader
         */
        private $loader;
        /**
         * @var ITemplateOptions
         */
        private $options;

        public function __construct(ITemplateLoader $loader, ITemplateOptions $options)
        {
            $this->loader = $loader;
            $this->options = $options;
        }

        public function render($template, $variables = [])
        {
            $content = $this->loader->load($template);
            $content = $this->fill($content, $variables);
            return $this->normalize_endings($content, $this->options->getLineEndings());
        }

        private function normalize_endings($content, $line_endings)
        {
            $content = str_replace("\r\n", "\n", $content);
            if ($line_endings != "\n") {
                $content = str_replace("\n", $line_endings, $content);
            }
            return $content;
        }

        private function fill($content, $variables)
        {
            return (new TemplateFiller($content, $variables))->fill();
        }
    }

    class TemplateFiller
    {
        protected $in;
        protected $out;
        protected $variables;
        protected $call_stack;

        const VARIABLE_BEGIN = "{{";
        const VARIABLE_END = "}}";

        /**
         * @param $content
         * @param $variables
         * @param $call_stack
         */
        public function __construct($content, $variables, $call_stack = [])
        {
            $this->in  = $this->prepareInStream($content);
            $this->out = $this->prepareOutStream();

            $this->call_stack = $call_stack;
            $this->variables  = $variables;
        }

        public function startsWith($haystack, $needle)
        {
            return $needle === "" ||
                strrpos($haystack, $needle, -strlen($haystack)) !== false;
        }

        public function endsWith($haystack, $needle)
        {
            return $needle === "" ||
                (
                    ($temp = strlen($haystack) - strlen($needle)) >= 0 &&
                    strpos($haystack, $needle, $temp) !== false
                );
        }

        public function readToBuffer()
        {
            while (!feof($this->in)) {
                $gathered = "";
                while (!feof($this->in)) {
                    $gathered .= $this->getNextChar();

                    if (self::VARIABLE_BEGIN == $gathered) {
                        while (!feof($this->in)) {
                            $gathered .= $this->getNextChar();

                            if ($this->endsWith($gathered, self::VARIABLE_END)) {
                                $this->processVariable($gathered);
                                $gathered = "";
                                break;
                            }
                        }
                        break;
                    }

                    if (!$this->startsWith(self::VARIABLE_BEGIN, $gathered)) {
                        break;
                    }
                }
                $this->addToOutput($gathered);
            }
        }

        public function fill()
        {
            $this->readToBuffer();
            return $this->getResult();
        }

        private function addToOutput($value)
        {
            fwrite($this->out, $value);
        }

        private function prepareInStream($content)
        {
            $in = fopen('php://memory', 'w');
            fwrite($in, $content);
            fseek($in, 0);

            return $in;
        }

        private function prepareOutStream()
        {
            return fopen('php://memory', 'w');
        }

        private function getResult()
        {
            fseek($this->out, 0);
            $result = "";
            while (!feof($this->out)) {
                $result .= fread($this->out, 8192);
            }
            return $result;
        }

        private function getVariableReplacement($buffer)
        {
            $variable = substr($buffer, 2, -2);
            if (!array_key_exists($variable, $this->variables)) {
                return $buffer;
            }

            $recursion          = in_array($variable, $this->call_stack);
            $call_stack = array_merge($this->call_stack, [$variable]);
            if ($recursion) {
                throw new RecursionTemplateException($call_stack);
            }

            return (new TemplateFiller($this->variables[ $variable ], $this->variables, $call_stack))->fill();
        }

        /**
         * @return string
         */
        protected function getNextChar()
        {
            return fread($this->in, 1);
        }

        protected function processVariable($buffer)
        {
            $this->addToOutput($this->getVariableReplacement($buffer));
        }
    }

